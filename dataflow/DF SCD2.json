{
	"name": "DF SCD2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "az_SQL_DimEmployee",
						"type": "DatasetReference"
					},
					"name": "DimEmployee"
				},
				{
					"dataset": {
						"referenceName": "az_SQL_DimEmployeeT2",
						"type": "DatasetReference"
					},
					"name": "DimEmployeeT2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "az_SQL_DimEmployeeT2",
						"type": "DatasetReference"
					},
					"name": "InsertNew"
				},
				{
					"dataset": {
						"referenceName": "az_SQL_DimEmployeeT2",
						"type": "DatasetReference"
					},
					"name": "InsertUpdatedRecords"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "select1"
				},
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select2"
				},
				{
					"name": "exists1"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "select3"
				},
				{
					"name": "lookup2"
				},
				{
					"name": "select4"
				},
				{
					"name": "filter2"
				},
				{
					"name": "derivedColumn4"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as integer,",
				"          FirstName as string,",
				"          LastName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimEmployee",
				"source(output(",
				"          EmployeeT2Key as integer,",
				"          EmpID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          StartDate as timestamp,",
				"          EndDate as timestamp,",
				"          IsActive as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimEmployeeT2",
				"DimEmployee filter(!isNull(ID)) ~> filter1",
				"filter1, DimEmployeeT2 lookup(ID == EmpID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 select(mapColumn(",
				"          S_ID = ID,",
				"          S_FirstName = DimEmployee@FirstName,",
				"          S_LastName = DimEmployee@LastName,",
				"          EmployeeT2Key,",
				"          D_EmpID = EmpID,",
				"          D_FirstName = DimEmployeeT2@FirstName,",
				"          D_LastName = DimEmployeeT2@LastName,",
				"          StartDate,",
				"          EndDate,",
				"          IsActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 split(isNull(IsActive),",
				"     disjoint: false) ~> split1@(NewRows, ExistingRows)",
				"split1@NewRows derive(IsActive = 1,",
				"          StartDate = currentTimestamp()) ~> derivedColumn1",
				"split1@ExistingRows select(mapColumn(",
				"          S_ID,",
				"          S_FirstName,",
				"          S_LastName,",
				"          EmployeeT2Key,",
				"          D_EmpID,",
				"          D_FirstName,",
				"          D_LastName,",
				"          StartDate,",
				"          EndDate,",
				"          IsActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2, DimEmployeeT2 exists(S_ID == EmpID,",
				"     negate:false,",
				"     broadcast: 'auto')~> exists1",
				"exists1 derive(IsActive = 0,",
				"          EndDate = currentTimestamp()) ~> derivedColumn3",
				"derivedColumn3 select(mapColumn(",
				"          S_ID,",
				"          S_FirstName,",
				"          S_LastName,",
				"          EmployeeT2Key,",
				"          D_EmpID,",
				"          D_FirstName,",
				"          D_LastName,",
				"          StartDate,",
				"          EndDate,",
				"          IsActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"filter1, DimEmployeeT2 lookup(ID == EmpID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup2",
				"lookup2 select(mapColumn(",
				"          ID,",
				"          FirstName = DimEmployee@FirstName,",
				"          LastName = DimEmployee@LastName,",
				"          EmployeeT2Key,",
				"          EmpID,",
				"          D_FirstName = DimEmployeeT2@FirstName,",
				"          D_LastName = DimEmployeeT2@LastName,",
				"          StartDate,",
				"          EndDate,",
				"          IsActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select4 filter(toInteger(ID)==toInteger(EmpID) && (FirstName!=D_FirstName || LastName!=D_LastName)) ~> filter2",
				"filter2 derive(StartDate = currentTimestamp(),",
				"          IsActive = 1) ~> derivedColumn4",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EmployeeT2Key as integer,",
				"          EmpID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          StartDate as timestamp,",
				"          EndDate as timestamp,",
				"          IsActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          EmpID = S_ID,",
				"          FirstName = S_FirstName,",
				"          LastName = S_LastName,",
				"          StartDate,",
				"          EndDate,",
				"          IsActive",
				"     )) ~> InsertNew",
				"derivedColumn4 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EmployeeT2Key as integer,",
				"          EmpID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          StartDate as timestamp,",
				"          EndDate as timestamp,",
				"          IsActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          EmpID,",
				"          FirstName,",
				"          LastName,",
				"          StartDate,",
				"          EndDate,",
				"          IsActive",
				"     )) ~> InsertUpdatedRecords"
			]
		}
	}
}