{
	"name": "DF SCD2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "az_SQL_DimEmployee",
						"type": "DatasetReference"
					},
					"name": "DimEmployee"
				},
				{
					"dataset": {
						"referenceName": "az_SQL_DimEmployeeT2",
						"type": "DatasetReference"
					},
					"name": "MaxKey"
				},
				{
					"dataset": {
						"referenceName": "az_SQL_DimEmployeeT2",
						"type": "DatasetReference"
					},
					"name": "DimEmployeeT2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "az_SQL_DimEmployeeT2",
						"type": "DatasetReference"
					},
					"name": "InsertNew"
				},
				{
					"dataset": {
						"referenceName": "az_SQL_DimEmployeeT2",
						"type": "DatasetReference"
					},
					"name": "Update"
				}
			],
			"transformations": [
				{
					"name": "RenameSourceColumns"
				},
				{
					"name": "CrossJoin"
				},
				{
					"name": "join1"
				},
				{
					"name": "split1"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select2"
				},
				{
					"name": "IsActive"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as integer,",
				"          FirstName as string,",
				"          LastName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimEmployee",
				"source(output(",
				"          MaxKey as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'Select max(EmployeeT2Key)  as MaxKey from dbo.DimEmployeeT2',",
				"     format: 'query') ~> MaxKey",
				"source(output(",
				"          EmployeeT2Key as integer,",
				"          EmpID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          StartDate as timestamp,",
				"          EndDate as timestamp,",
				"          IsActive as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimEmployeeT2",
				"DimEmployee select(mapColumn(",
				"          S_ID = ID,",
				"          S_FirstName = FirstName,",
				"          S_LastName = LastName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameSourceColumns",
				"RenameSourceColumns, MaxKey join(1 ==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> CrossJoin",
				"CrossJoin, DimEmployeeT2 join(S_ID == EmpID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 split(S_ID==EmpID && (S_FirstName!=FirstName ||S_LastName!=LastName),",
				"     disjoint: false) ~> split1@(Matched, NonMatching)",
				"split1@NonMatching select(mapColumn(",
				"          S_ID,",
				"          S_FirstName,",
				"          S_LastName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(StartDate = currentTimestamp(),",
				"          IsActive = 1) ~> derivedColumn1",
				"split1@Matched select(mapColumn(",
				"          S_ID,",
				"          S_FirstName,",
				"          S_LastName,",
				"          MaxKey,",
				"          EmployeeT2Key,",
				"          EmpID,",
				"          FirstName,",
				"          LastName,",
				"          StartDate,",
				"          EndDate,",
				"          IsActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 derive(EndDate = currentTimestamp(),",
				"          IsActive = 0) ~> IsActive",
				"IsActive alterRow(updateIf(S_ID==EmpID && IsActive ==1 && (S_FirstName!=FirstName ||S_LastName!=LastName))) ~> alterRow1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EmployeeT2Key as integer,",
				"          EmpID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          StartDate as timestamp,",
				"          EndDate as timestamp,",
				"          IsActive as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          EmpID = S_ID,",
				"          FirstName = S_FirstName,",
				"          LastName = S_LastName,",
				"          StartDate,",
				"          IsActive",
				"     )) ~> InsertNew",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EmployeeT2Key as integer,",
				"          EmpID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          StartDate as timestamp,",
				"          EndDate as timestamp,",
				"          IsActive as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['EmpID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          EndDate,",
				"          IsActive,",
				"          EmpID = S_ID",
				"     )) ~> Update"
			]
		}
	}
}