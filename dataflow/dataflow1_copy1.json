{
	"name": "dataflow1_copy1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "az_SQL_DimEmployee",
						"type": "DatasetReference"
					},
					"name": "dimemployee"
				},
				{
					"dataset": {
						"referenceName": "az_SQL_DimEmployeeT2",
						"type": "DatasetReference"
					},
					"name": "T2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "az_SQL_DimEmployeeT2",
						"type": "DatasetReference"
					},
					"name": "InsertNewRecords"
				},
				{
					"dataset": {
						"referenceName": "az_SQL_DimEmployeeT2",
						"type": "DatasetReference"
					},
					"name": "UpdateExistingRecords"
				}
			],
			"transformations": [
				{
					"name": "GetActiveRecords"
				},
				{
					"name": "DesHashColumn"
				},
				{
					"name": "SourceHashColumns"
				},
				{
					"name": "CheckforNewRecords"
				},
				{
					"name": "SetStartAndIsActive"
				},
				{
					"name": "GetMatchingRecords"
				},
				{
					"name": "SetEndDateAndIsActive"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as integer,",
				"          FirstName as string,",
				"          LastName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimemployee",
				"source(output(",
				"          EmployeeT2Key as integer,",
				"          EmpID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          StartDate as timestamp,",
				"          EndDate as timestamp,",
				"          IsActive as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> T2",
				"T2 filter(IsActive==1) ~> GetActiveRecords",
				"GetActiveRecords derive(DesHashColumn = md5(FirstName,LastName)) ~> DesHashColumn",
				"dimemployee derive(HashInput = md5(FirstName,LastName)) ~> SourceHashColumns",
				"SourceHashColumns, DesHashColumn exists(HashInput==DesHashColumn,",
				"     negate:true,",
				"     broadcast: 'auto')~> CheckforNewRecords",
				"CheckforNewRecords derive(StartDate = currentTimestamp(),",
				"          IsActive = 1) ~> SetStartAndIsActive",
				"DesHashColumn, SetStartAndIsActive exists(EmpID == ID",
				"     && T2@FirstName == dimemployee@FirstName,",
				"     negate:false,",
				"     broadcast: 'auto')~> GetMatchingRecords",
				"GetMatchingRecords derive(EndDate = currentTimestamp(),",
				"          IsActive = 0) ~> SetEndDateAndIsActive",
				"SetEndDateAndIsActive alterRow(updateIf(true())) ~> alterRow1",
				"SetStartAndIsActive sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EmployeeT2Key as integer,",
				"          EmpID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          StartDate as timestamp,",
				"          EndDate as timestamp,",
				"          IsActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          EmpID = ID,",
				"          FirstName,",
				"          LastName,",
				"          StartDate,",
				"          IsActive",
				"     )) ~> InsertNewRecords",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EmployeeT2Key as integer,",
				"          EmpID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          StartDate as timestamp,",
				"          EndDate as timestamp,",
				"          IsActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['EmpID','FirstName','LastName','StartDate'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          EmpID,",
				"          FirstName,",
				"          LastName,",
				"          StartDate,",
				"          EndDate,",
				"          IsActive",
				"     )) ~> UpdateExistingRecords"
			]
		}
	}
}