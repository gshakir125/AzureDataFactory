{
	"name": "dataflow1_copy1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "az_SQL_DimEmployee",
						"type": "DatasetReference"
					},
					"name": "dimemployee"
				},
				{
					"dataset": {
						"referenceName": "az_SQL_DimEmployeeT2",
						"type": "DatasetReference"
					},
					"name": "T2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "az_SQL_DimEmployeeT2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "az_SQL_DimEmployeeT2",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "az_SQL_DimEmployeeT2",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "join1"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "filter1"
				},
				{
					"name": "filter2"
				},
				{
					"name": "join2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as integer,",
				"          FirstName as string,",
				"          LastName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimemployee",
				"source(output(",
				"          EmployeeT2Key as integer,",
				"          EmpID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          StartDate as timestamp,",
				"          EndDate as timestamp,",
				"          IsActive as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> T2",
				"join2 select(mapColumn(",
				"          S_ID = ID,",
				"          S_FirstName = dimemployee@FirstName,",
				"          S_LastName = dimemployee@LastName,",
				"          EmployeeT2Key,",
				"          D_EmpID = EmpID,",
				"          D_FirstName = T2@FirstName,",
				"          D_LastName = T2@LastName,",
				"          StartDate,",
				"          EndDate,",
				"          IsActive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 split(!isNull(S_ID),",
				"     disjoint: false) ~> split1@(NewRows, ExistingRows)",
				"split1@NewRows derive(StartDate = currentTimestamp(),",
				"          IsActive = 1) ~> derivedColumn1",
				"filter2 derive(EndDate = currentTimestamp(),",
				"          IsActive = 0) ~> derivedColumn2",
				"derivedColumn2 alterRow(updateIf(IsActive == 1 && (S_FirstName!=D_FirstName || S_LastName != D_LastName))) ~> AlterRow1",
				"dimemployee, T2 join(ID == EmpID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"filter1 derive(StartDate = currentTimestamp(),",
				"          IsActive = 1) ~> derivedColumn3",
				"join1 filter(IsActive == 1 && (dimemployee@FirstName!=T2@FirstName || dimemployee@LastName!=T2@LastName)) ~> filter1",
				"split1@ExistingRows filter(S_ID==D_EmpID && IsActive==1 && (S_FirstName!=D_FirstName || S_LastName != D_LastName)) ~> filter2",
				"dimemployee, T2 join(ID == EmpID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EmployeeT2Key as integer,",
				"          EmpID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          StartDate as timestamp,",
				"          EndDate as timestamp,",
				"          IsActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          EmpID = S_ID,",
				"          FirstName = S_FirstName,",
				"          LastName = S_LastName,",
				"          StartDate,",
				"          EndDate,",
				"          IsActive",
				"     )) ~> sink1",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EmployeeT2Key as integer,",
				"          EmpID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          StartDate as timestamp,",
				"          EndDate as timestamp,",
				"          IsActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['EmpID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          EmpID = D_EmpID,",
				"          FirstName = D_FirstName,",
				"          LastName = D_LastName,",
				"          StartDate,",
				"          EndDate,",
				"          IsActive",
				"     )) ~> sink2",
				"derivedColumn3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EmployeeT2Key as integer,",
				"          EmpID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          StartDate as timestamp,",
				"          EndDate as timestamp,",
				"          IsActive as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          EmpID = ID,",
				"          FirstName = dimemployee@FirstName,",
				"          LastName = dimemployee@LastName,",
				"          StartDate,",
				"          EndDate,",
				"          IsActive",
				"     )) ~> sink3"
			]
		}
	}
}